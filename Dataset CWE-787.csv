"int id_sequence[3];

/* Populate the id array. */

id_sequence[0] = 123;
id_sequence[1] = 234;
id_sequence[2] = 345;
id_sequence[3] = 456; "
"int returnChunkSize(void *) {
/* if chunk info is valid, return the size of usable memory,

* else, return -1 to indicate an error

*/
...}
int main() {...
memcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));
...} "
"void host_lookup(char *user_supplied_addr){struct hostent *hp;
in_addr_t *addr;
char hostname[64];
in_addr_t inet_addr(const char *cp);

/*routine that ensures user_supplied_addr is in the right format for conversion */

validate_addr_form(user_supplied_addr);
addr = inet_addr(user_supplied_addr);
hp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);
strcpy(hostname, hp->h_name);} "
"char * copy_input(char *user_supplied_string){int i, dst_index;
char *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);
if ( MAX_SIZE <= strlen(user_supplied_string) ){die(""user string too long, die evil hacker!"");}
dst_index = 0;
for ( i = 0; i < strlen(user_supplied_string); i++ ){if( '&' == user_supplied_string[i] ){dst_buf[dst_index++] = '&';
dst_buf[dst_index++] = 'a';
dst_buf[dst_index++] = 'm';
dst_buf[dst_index++] = 'p';
dst_buf[dst_index++] = ';';}
else if ('<' == user_supplied_string[i] ){
/* encode to &lt; */
}
else dst_buf[dst_index++] = user_supplied_string[i];}
return dst_buf;} "
"char* trimTrailingWhitespace(char *strMessage, int length) {char *retMessage;
char *message = malloc(sizeof(char)*(length+1));

// copy input string to a temporary string
char message[length+1];
int index;
for (index = 0; index < length; index++) {message[index] = strMessage[index];}
message[index] = '\0';

// trim trailing whitespace
int len = index-1;
while (isspace(message[len])) {message[len] = '\0';
len--;}

// return string without trailing whitespace
retMessage = message;
return retMessage;} "
"int i;
unsigned int numWidgets;
Widget **WidgetList;

numWidgets = GetUntrustedSizeValue();
if ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {ExitError(""Incorrect number of widgets requested!"");}
WidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));
printf(""WidgetList ptr=%p\n"", WidgetList);
for(i=0; i<numWidgets; i++) {WidgetList[i] = InitializeWidget();}
WidgetList[numWidgets] = NULL;
showWidgets(WidgetList); "
"int main() {...
char *result = strstr(destBuf, ""Replace Me"");
int idx = result - destBuf;
strcpy(&destBuf[idx], srcBuf);
...} "
"#include <stdio.h>
#include <string.h>

int main() {
    char buffer[10];
    strcpy(buffer, ""This string is too long for the buffer"");
    printf(""%s\n"", buffer);
    return 0;
}"
"public class Main {
    public static void main(String[] args) {
        int[] array = new int[5];
        array[10] = 50; // Out-of-bounds write
    }
}"
"let buffer = new Array(5);
buffer[10] = ""Out of bounds"";
console.log(buffer);"
"class Program {
    static void Main(string[] args) {
        int[] array = new int[5];
        array[10] = 20; // Out-of-bounds write
    }
}"
"array = [1, 2, 3, 4, 5]
array[10] = 15 
puts array"
"my @array = (1, 2, 3, 4, 5);
$array[10] = 20; 
print ""@array\n"";"
"<?php
$array = array(1, 2, 3, 4, 5);
$array[10] = 20;
print_r($array);
?>"
"var array = [1, 2, 3, 4, 5]
array[10] = 20 
print(array)"
"fun main() {
    val array = IntArray(5)
    array[10] = 20 
}"
"package main

import ""fmt""

func main() {
    array := make([]int, 5)
    Array[10] = 20
    fmt.Println(array)
}"
